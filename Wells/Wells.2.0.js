globalConfig.chooseLang = function (en, fr) {return (globalConfig.language === "EN") ? en : fr;};//globalConfig.searchHelpTxt = globalConfig.chooseLang("You may search by ", "Vous pouvez rechercher par ") + "<strong>" + globalConfig.chooseLang("Well ID", "num\u00e9ro d\u0027identification du puits") + "</strong>, <strong>" + globalConfig.chooseLang("Well Tag #", "No de la plaque d\u0027identification du puits") + "</strong>, <strong>"  + globalConfig.chooseLang("address", "adresse") + "</strong>, etc.";globalConfig.searchableFieldsList = [{en: "Well ID", fr: "num\u00e9ro d\u0027identification du puits"}, {en: "Well Tag #", fr: "No de la plaque d\u0027identification du puits"}, {en: "address", fr: "adresse"}];globalConfig.searchHelpTxt = globalConfig.chooseLang("You may search by ", "Vous pouvez rechercher par ");for(var i=0; i<globalConfig.searchableFieldsList.length - 1; i++) {	globalConfig.searchHelpTxt = globalConfig.searchHelpTxt + "<strong>" + globalConfig.chooseLang(globalConfig.searchableFieldsList[i].en, globalConfig.searchableFieldsList[i].fr) + "</strong>, ";}globalConfig.searchHelpTxt = globalConfig.searchHelpTxt + "<strong>" + globalConfig.chooseLang(globalConfig.searchableFieldsList[i].en, globalConfig.searchableFieldsList[i].fr) + "</strong> " + globalConfig.chooseLang("or see help for advanced options.", "ou consulter l'aide pour de l'information sur les recherches avanc&eacute;es.");globalConfig.tableSimpleTemplateTitleLang = globalConfig.chooseLang("Note: Data is in English only.", "\u00c0 noter : Les donn\u00e9es sont en anglais seulement.");globalConfig.searchControlHTML = '<div id="searchTheMap"></div><div id="searchHelp"></div><br>\	<label class="element-invisible" for="map_query">' + globalConfig.chooseLang('Search the map', 'Recherche carte interactive') + '</label>\	<input id="map_query" type="text" title="' + globalConfig.chooseLang('Search term', 'Terme de recherche') + '" maxlength="100" size="50" onkeypress="return globalConfig.entsub(event)"></input>\	<label class="element-invisible" for="search_submit">' + globalConfig.chooseLang('Search', 'Recherche') + '</label>\	<input id="search_submit" type="submit" title="Search" onclick="globalConfig.search()" value="' + globalConfig.chooseLang('Search', 'Recherche') + '"></input>\	<br/>\	<input id="currentMapExtent" type="checkbox" name="currentExtent" title="' + globalConfig.chooseLang('Current Map Display', '&Eacute;tendue de la carte courante') + '">\	<label for="currentExtent" class=\'option\'>' + globalConfig.chooseLang('Search current map display only', '&Eacute;tendue de la carte courante') + '</label><div id="information"></div>';		globalConfig.displayDisclaimer = true;globalConfig.extraImageService = {visible: false};globalConfig.locationServicesList = [];globalConfig.otherInfoHTML = "<br><br>";globalConfig.accessible = globalConfig.accessible || false;globalConfig.usePredefinedMultipleTabs = true;globalConfig.usejQueryUITable = true;if (globalConfig.accessible) {	globalConfig.usePredefinedMultipleTabs = false;	globalConfig.usejQueryUITable = false;	globalConfig.allowMultipleIdentifyResult = false;	globalConfig.displayTotalIdentifyCount = false;	globalConfig.postConditionsCallbackName = "AccessibleWells";}globalConfig.convertDepthFormat = function (val){	if (val === "N/A") {		return "N/A";	}	var res = parseFloat(val);	return res.toFixed(1);};globalConfig.convertDateFormat = function (str){	if (str === "N/A") {		return "N/A";	}	var strArray = str.split("/");	if(strArray.length == 3){		str = strArray[1] + "/" + strArray[2] + "/" + strArray[0];	}	return str;};if (globalConfig.language === "EN") {	globalConfig.infoWindowWidth = '550px';	globalConfig.fieldNamesList = [		"Well ID", 		"Well Tag # (since 2003)", 		"Audit # (since 1986)", 		"Contractor Lic#", 		"Well Depth (m)", 		"Date of Completion (MM/DD/YYYY)", 		"Well Record Information"	];	//globalConfig.LinkLang = "Link";	globalConfig.LinkLang = "View record";	globalConfig.InformationLang = "Information";	//globalConfig.Wells_Report_URL = "well-record-information";	globalConfig.Wells_Report_URL = "Wells_Report.htm";} else {	globalConfig.infoWindowWidth = '560px';	globalConfig.infoWindowHeight = '200px';	globalConfig.infoWindowContentHeight = '160px';		globalConfig.fieldNamesList = [		"Identification du puits", 		"N&deg; plaque (dep. 2003)", 		"N&deg; de v\u00e9rification (dep. 1986)", 		"Licence (entrepreneur)", 		"Profondeur (m)", 		"Date de finition (MM/JJ/AAAA)", 		"Donn\u00e9es compl\u00e8tes sur le puits"	];	//globalConfig.LinkLang = "Lien";	globalConfig.LinkLang = "Vue dossier";	globalConfig.InformationLang = "Information";	globalConfig.Wells_Report_URL = "donnees-completes-sur-le-puits";}globalConfig.calculatePDFURL = function(PATH, WELL_ID) {	if((!!PATH) && (PATH.length > 0) && (PATH !== "N/A")) {		return "| <a target='_blank' href='http://files.ontario.ca/moe_mapping/downloads/2Water/Wells_pdfs/" + WELL_ID.substring(0,3) + "/" + WELL_ID + ".pdf'>PDF</a>";	}	return "";};globalConfig.tableFieldList = [	{name: globalConfig.fieldNamesList[0], value: "{globalConfig.processNA(WELL_ID)}"}, 	{name: globalConfig.fieldNamesList[1], value: "{globalConfig.processNA(TAG_NO)}"}, 	{name: globalConfig.fieldNamesList[2], value: "{globalConfig.processNA(AUDIT_NO)}"}, 	{name: globalConfig.fieldNamesList[3], value: "{globalConfig.processNA(CONTRACTOR)}"}, 	{name: globalConfig.fieldNamesList[4], value: "{globalConfig.convertDepthFormat(DEPTH_M)}"}, 	{name: globalConfig.fieldNamesList[5], value: "{globalConfig.convertDateFormat(WELL_COMPLETED_DATE)}"},	//{name: globalConfig.fieldNamesList[6], value: "<a target='_blank' href='{URL_" + globalConfig.language + "}'>" + globalConfig.LinkLang + "</a>"}	//{name: globalConfig.fieldNamesList[6], value: "<a target='_blank' href='" + globalConfig.Wells_Report_URL + "?id={BORE_HOLE_ID}'>" + globalConfig.LinkLang + "</a>"}	{name: globalConfig.fieldNamesList[6], value: "<a target='_blank' href='" + globalConfig.Wells_Report_URL + "?id={BORE_HOLE_ID}'>HTML</a>{globalConfig.calculatePDFURL(PATH, WELL_ID)}"}];globalConfig.queryLayerList = [{	url: globalConfig.url + "/0",	tabsTableTemplate: [{		label: globalConfig.InformationLang,		content:globalConfig.tableFieldList	}], 	tableSimpleTemplate: {		title: globalConfig.tableSimpleTemplateTitleLang, 		content: globalConfig.tableFieldList	} }];globalConfig.search = function(){	var searchString = document.getElementById(globalConfig.searchInputBoxDivId).value.trim();	if(searchString.length === 0){		return;	}		MOEMAP.clearOverlays();	globalConfig.searchString = searchString;		globalConfig.withinExtent = false;	if (!globalConfig.accessible) {		globalConfig.withinExtent = document.getElementById(globalConfig.currentMapExtentDivId).checked;	}	globalConfig.searchInProgress();	var name = searchString.toUpperCase().replace(/\u00c9/g,"E").replace(/\u00c8/g,"E").replace(/\u00DB/g,"U").replace(/\u00C0/g,"A");			if(mapConfig.searchWellID(name)){		return;	}	if(mapConfig.searchContractorID(name)){		return;	}	if(mapConfig.searchContractorIDwithYear(name)){		return;	}	if(mapConfig.searchTagID(name)){		return;	}	if(mapConfig.searchAuditID(name)){		return;	}	if(mapConfig.searchCompletionDate(name)){		return;	}	if(mapConfig.searchWellDepth(name)){		return;	}	if (mapConfig.isFromAndTo(name)>0) {		var strArray = name.substring(5).split(" TO ");		if(mapConfig.isFromAndTo(name) == 2){			strArray = name.substring(3).split(" AU ");		}		if(mapConfig.isFromAndTo(name) == 3){			strArray = name.substring(3).split(" A ");		}		var minDateType = mapConfig.isDateString((strArray[0]).trim());		var maxDateType = mapConfig.isDateString((strArray[1]).trim());		if (mapConfig.isFromAndToDepth(strArray)) {			var minDepth = (strArray[0]).split(/\s+/)[0];			var maxDepth = (strArray[1]).split(/\s+/)[0];			mapConfig.searchWithWhere("((DEPTH_M >= " + minDepth +  ") AND (DEPTH_M <= " +  maxDepth + "))");			return;		}else if ((minDateType > 0)&&(maxDateType > 0)) {			var minDate = mapConfig.stringToDate(strArray[0], minDateType);			var maxDate = mapConfig.stringToDate(strArray[1], maxDateType);							mapConfig.searchWithWhere("((WELL_COMPLETED_DATE >= '" + minDate +  "') AND (WELL_COMPLETED_DATE <= '" +  maxDate + "'))");			return;		}				} else {		if (globalConfig.accessible) {			globalConfig.noResultFound();			return;		}		var queryParams = {			searchString: searchString,			withinExtent: globalConfig.withinExtent		};		MOEMAP.geocodeAddress(queryParams);	}};var MOEMapTools = {	monthNames : ["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER", "OCTOBER","NOVEMBER","DECEMBER"],	monthFrenchNames : ["JANVIER","FEVRIER","MARS","AVRIL","MAI","JUIN","JUILLET","AOUT","SEPTEMBRE", "OCTOBRE","NOVEMBRE","DECEMBRE"],	monthShortNames : ["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"],	monthDigitalNames : ["01","02","03","04","05","06","07","08","09","10","11","12"],	getArrayIndex: function (str, strArray){		var index = -1;		for(var i=0; i < strArray.length; i++) {			if(strArray[i] == str){				index = i;				break;			}		}		return index;	}};var mapConfig = {	searchWithWhere: function (where) {		var queryParams = {			searchString: globalConfig.searchString,			where: where,			withinExtent: globalConfig.withinExtent,			requireGeocode: false		};		MOEMAP.queryLayersWithConditionsExtent(queryParams);		},	searchWellID: function(name){			var coors = globalConfig.replaceChar(name, ',', ' ');		var coorsArray = coors.split(/\s+/);		if(mapConfig.isDigitalsList(coorsArray, 7)){			mapConfig.searchWithWhere("((WELL_ID = '" + coorsArray.join("') OR (WELL_ID='") +  "'))");			return true;		}		return false;	},	searchContractorID: function(name){			if (mapConfig.isDigitals(name, 4)){			//MOEMAP.queryLayerWithConditions("CONTRACTOR = '" + name +  "'");						mapConfig.searchWithWhere("CONTRACTOR = '" + name +  "'");			return true;		}		return false;	},			searchContractorIDwithYear: function(name){			var coors = globalConfig.replaceChar(name, ',', ' ');		var coorsArray = coors.split(/\s+/);		if (coorsArray.length != 2) {			return false;		}		if((parseInt(coorsArray[1])>=2100)||(parseInt(coorsArray[1])<=1900)){			return false;		}		if(mapConfig.isDigitalsList(coorsArray, 4)){			//MOEMAP.queryLayerWithConditions("CONTRACTOR = '" + coorsArray[0] +  "' AND YEAR_COMPLETED = '" +  coorsArray[1] + "'");			mapConfig.searchWithWhere("CONTRACTOR = '" + coorsArray[0] +  "' AND YEAR_COMPLETED = '" +  coorsArray[1] + "'");			return true;		}		return false;	},	searchTagID: function(name){			var coors = globalConfig.replaceChar(name, ',', ' ');		var coorsArray = coors.split(/\s+/);		if(mapConfig.isTagNoList(coorsArray)){			//MOEMAP.queryLayerWithConditions("((TAG_NO = '" + coorsArray.join("') OR (TAG_NO='") +  "'))");			mapConfig.searchWithWhere("((TAG_NO = '" + coorsArray.join("') OR (TAG_NO='") +  "'))");				return true;		}		return false;	},	isTagNoList: function(coorsArray){		for(var i=0; i<=coorsArray.length - 1; i++){					if(!mapConfig.isTagNO(coorsArray[i])){				return false;			}		}		return true;	}, 			isTagNO: function(name){		if((name.length > 8)||(name.length < 6)){			return false;		}		var firstLetter = name.substring(0,1).toUpperCase();		if(firstLetter != "A"){			return false;		}		var reg = /^\d+$/;		return reg.test(name.substring(1));	},	searchAuditID: function(name){			var coors = globalConfig.replaceChar(name, ',', ' ');		var coorsArray = coors.split(/\s+/);		if(coors.length < 6){			return false;		}		if (coorsArray.length < 2) {			return false;		}		if ((coorsArray[0]).toUpperCase() == "AUDIT"){			coorsArray = coors.substring(6).split(/\s+/);			mapConfig.searchWithWhere("((AUDIT_NO = '" + coorsArray.join("') OR (AUDIT_NO='") +  "'))");			return true;		}		if ((coorsArray[0]).toUpperCase() == "VERIFICATION"){			coorsArray = coors.substring(13).split(/\s+/);			mapConfig.searchWithWhere("((AUDIT_NO = '" + coorsArray.join("') OR (AUDIT_NO='") +  "'))");			return true;		}				return false;	},	searchCompletionDate: function(name){		var dateType = mapConfig.isDateString(name);		if (dateType <= 0) {			return false;		}		var date = mapConfig.stringToDate(name, dateType);		var where = "(WELL_COMPLETED_DATE = '" + date +  "')";		mapConfig.searchWithWhere("(WELL_COMPLETED_DATE = '" + date +  "')");		return true;	},		searchWellDepth: function(name){		var coorsArray = name.split(/\s+/);		if (coorsArray.length != 2) {			return false;		}		if((coorsArray[1] != "M")&&(coorsArray[1] != "METER")&&(coorsArray[1] != "METRE")&&(coorsArray[1] != "METERS")&&(coorsArray[1] != "METRES")){			return false;		}		var reg = /^(-?\d+)(\.\d+)?$/;		if(!reg.test(coorsArray[0])){			return false;		}		var depth = parseFloat(coorsArray[0]);		var where = "((DEPTH_M > " + (depth-0.1) +  ") AND (DEPTH_M < " +  (depth+0.1) + "))";		mapConfig.searchWithWhere("((DEPTH_M > " + (depth-0.1) +  ") AND (DEPTH_M < " +  (depth+0.1) + "))");			return true;	},		isDigitalsList: function(coorsArray, len){		for(var i=0; i<=coorsArray.length - 1; i++){					if(!mapConfig.isDigitals(coorsArray[i], len)){				return false;			}		}				return true;	}, 		isDigitals: function(str, len){		if(str.length != len)			return false;		var reg = /^\d+$/;		return reg.test(str);	},	isFromAndTo: function(name){		var str = name;		if ((str.indexOf("FROM ") == 0)&&(str.split(" TO ").length == 2)){			return 1;		}		if ((str.indexOf("DU ") == 0)&&(str.split(" AU ").length == 2)){			return 2;		}		if ((str.indexOf("DE ") == 0)&&(str.split(" A ").length == 2)){			return 3;		}	},	isFromAndToDepth: function(strArray){		var maxArray = (strArray[1]).split(/\s+/);		if(maxArray.length == 2){			if((maxArray[1] == "M")||(maxArray[1] == "METER")||(maxArray[1] == "METRE")||(maxArray[1] == "METERS")||(maxArray[1] == "METRES")){				var minDepth = strArray[0];				var maxDepth = maxArray[0];				var reg = /^(-?\d+)(\.\d+)?$/;				if(reg.test(minDepth)&&reg.test(maxDepth)){					var minDep = parseFloat(minDepth);					var maxDep = parseFloat(maxDepth);					if((maxDep > minDep)&&(maxDep < 999999)){						return true;					}				}			}		}				return false;	},	isDateString: function(dateString){		var str = globalConfig.replaceChar(dateString, ',', ' ');		var dateArray = str.split(/\s+/);		if(dateArray.length == 3){			var reg = /^\d+$/;			var monthIndex = -1;			if(reg.test(dateArray[2])&&((dateArray[2]).length==4)&&reg.test(dateArray[1])&&((dateArray[1]).length <=2)){				monthIndex = MOEMapTools.getArrayIndex(dateArray[0], MOEMapTools.monthNames);			    if(monthIndex >= 0){					if(mapConfig.isDate(parseInt(dateArray[2]),monthIndex + 1, parseInt(dateArray[1]))){						return 2; 					}				}				monthIndex = MOEMapTools.getArrayIndex(dateArray[0], MOEMapTools.monthShortNames);				if(monthIndex >= 0){					if(mapConfig.isDate(parseInt(dateArray[2]),monthIndex + 1, parseInt(dateArray[1]))){						return 1; 					}				}			}			if(reg.test(dateArray[2])&&((dateArray[2]).length==4)&&reg.test(dateArray[0])&&((dateArray[0]).length <=2)){				monthIndex = MOEMapTools.getArrayIndex((dateArray[1]).replace(/\u00c9/g,"E").replace(/\u00DB/g,"U"), MOEMapTools.monthFrenchNames);			    if( monthIndex>= 0){					if(mapConfig.isDate(parseInt(dateArray[2]),monthIndex + 1, parseInt(dateArray[0]))){						return 5; 					}				}			}		}		str = globalConfig.replaceChar(dateString, '/', ' ');		dateArray = str.split(/\s+/);		if(dateArray.length == 3){			var reg = /^\d+$/;			if(reg.test(dateArray[2])&&((dateArray[2]).length==4)&&reg.test(dateArray[1])&&((dateArray[1]).length <=2)&&reg.test(dateArray[0])&&((dateArray[0]).length <=2)){				if(mapConfig.isDate(parseInt(dateArray[2]), parseInt(dateArray[0]), parseInt(dateArray[1]))){					return 3;  // MM/DD/YYYY				}			}			if(reg.test(dateArray[0])&&((dateArray[0]).length==4)&&reg.test(dateArray[1])&&((dateArray[1]).length <=2)&&reg.test(dateArray[2])&&((dateArray[2]).length <=2)){				if(mapConfig.isDate(parseInt(dateArray[0]), parseInt(dateArray[1]), parseInt(dateArray[2]))){					return 4;  // YYYY/MM/DD				}			}		}		return -1;	},	isDate: function(year, month, day){		var date = new Date(year, month-1, day);		var dStr1 = "" + date.getFullYear() + (date.getMonth()+1) + date.getDate();		var dStr2 = "" + year + month + day;		return (dStr1 == dStr2);	},	stringToDate: function(dateString, dateType){		var str = globalConfig.replaceChar(dateString, ',', ' ');		str = globalConfig.replaceChar(str, '/', ' ');		str = str.trim();		var dateArray = str.split(/\s+/);		var year = "";		var month = "";		var day = "";		switch (dateType){			case 1:  //Jun 3, 2010				year = dateArray[2];				month = MOEMapTools.monthDigitalNames[MOEMapTools.getArrayIndex(dateArray[0], MOEMapTools.monthShortNames)];				day = dateArray[1];				break;			case 2:  //June 3, 2010				year = dateArray[2];				month = MOEMapTools.monthDigitalNames[MOEMapTools.getArrayIndex(dateArray[0], MOEMapTools.monthNames)];				day = dateArray[1];				break;			case 3:  //MM/DD/YYYY				year = dateArray[2];				month = dateArray[0];				day = dateArray[1];				break;			case 4:  //YYYY/MM/DD				year = dateArray[0];				month = dateArray[1];				day = dateArray[2];				break;			case 5:  //1 D?cembre 2011				year = dateArray[2];				month = MOEMapTools.monthDigitalNames[MOEMapTools.getArrayIndex((dateArray[1]).replace(/\u00DB/g,"U").replace(/\u00c9/g,"E"), MOEMapTools.monthFrenchNames)];				day = dateArray[0];				break;							default:				break;		}		if((parseInt(day)<10)&&(day.length == 1)){			day = "0" + day;		}		if((parseInt(month)<10)&&(month.length == 1)){			month = "0" + month;		}		return year + "/" + month + "/" + day;	}	};	